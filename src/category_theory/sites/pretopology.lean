/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/

import category_theory.sites.grothendieck

/-!
# Grothendieck pretopologies

Definition and lemmas about Grothendieck pretopologies.
A Grothendieck pretopology for a category `C` is a set of families of morphisms with fixed codomain,
satisfying certain closure conditions.

We show that a pretopology generates a genuine Grothendieck topology, and every topology has
a maximal pretopology which generates it.

## Todo

Define sheaves on a pretopology, and show they are the same as the sheaves for the topology
generated by the pretopology.

## Tags

coverage, pretopology, site

## References

* [https://ncatlab.org/nlab/show/Grothendieck+pretopology][nlab]
* [S. MacLane, I. Moerdijk, *Sheaves in Geometry and Logic*][MM91]
* [https://stacks.math.columbia.edu/tag/00VG][Stacks]
-/

universes v u
noncomputable theory

namespace category_theory

open category_theory category

variables {C : Type u} [category.{v} C]

/--
Pullback a set of arrows with given codomain along a fixed map, by taking the pullback in the
category.
This is not the same as the arrow set of `sieve.pullback`, but there is a relation between them
in `pullback_arrows_comm`.
-/
def pullback_arrows [limits.has_pullbacks C] {X Y : C} (f : Y ‚ü∂ X) (S : arrows_with_codomain X) :
  arrows_with_codomain Y :=
Œª Z g, ‚àÉ Z' (h : Z' ‚ü∂ X), S h ‚àß ‚àÉ (H : limits.pullback h f = Z),
  eq_to_hom H.symm ‚â´ limits.pullback.snd = g

lemma pullback_arrows_comm [limits.has_pullbacks C] {X Y : C} (f : Y ‚ü∂ X)
  (R : arrows_with_codomain X) :
  sieve.generate (pullback_arrows f R) = sieve.pullback f (sieve.generate R) :=
begin
  ext Z g,
  split,
  { rintro ‚ü®W, k, l, ‚ü®T, g, hg, rfl, rfl‚ü©, rfl‚ü©,
    refine ‚ü®_, k ‚â´ limits.pullback.fst, g, hg, _‚ü©,
    rw [assoc, limits.pullback.condition, eq_to_hom_refl, id_comp, assoc] },
  { rintro ‚ü®W, k, h, hh, comm‚ü©,
    exact ‚ü®_, limits.pullback.lift _ _ comm, _, ‚ü®_, h, hh, rfl, rfl‚ü©, by simp‚ü© },
end

variables (C) [limits.has_pullbacks C]

/--
A (Grothendieck) pretopology on `C` is a collection of morphisms with fixed target for each object,
satisfying three axioms:
1. Every family consisting of a single isomorphism is a covering family.
2. The collection of covering families is stable under pullback.
3. Given a covering family, and a covering family on each domain of the former, the composition
   is a covering family.

In some sense, a pretopology can be seen as Grothendieck topology with weaker saturation conditions,
in that each covering is not necessarily downward closed.

See: https://ncatlab.org/nlab/show/Grothendieck+pretopology, or
https://stacks.math.columbia.edu/tag/00VH, or [MM92] Chapter III, Section 2, Definition 2.
Note that Stacks calls a category together with a pretopology a site, and [MM92] calls this
a basis for a topology.
-/
@[ext]
structure pretopology :=
(coverings : Œ† (X : C), set (arrows_with_codomain X))
(has_isos : ‚àÄ ‚¶ÉX Y‚¶Ñ (f : Y ‚ü∂ X) [is_iso f], arrows_with_codomain.singleton_arrow f ‚àà coverings X)
(pullbacks : ‚àÄ ‚¶ÉX Y‚¶Ñ (f : Y ‚ü∂ X) S, S ‚àà coverings X ‚Üí pullback_arrows f S ‚àà coverings Y)
(transitive : ‚àÄ ‚¶ÉX : C‚¶Ñ (S : arrows_with_codomain X)
               (Ti : Œ† ‚¶ÉY‚¶Ñ (f : Y ‚ü∂ X), S f ‚Üí arrows_with_codomain Y), S ‚àà coverings X ‚Üí
               (‚àÄ ‚¶ÉY‚¶Ñ f (H : S f), Ti f H ‚àà coverings Y) ‚Üí S.bind Ti ‚àà coverings X)

namespace pretopology

instance : has_coe_to_fun (pretopology C) :=
‚ü®_, Œª J, J.coverings‚ü©

instance : partial_order (pretopology C) :=
{ le := Œª K‚ÇÅ K‚ÇÇ, (K‚ÇÅ : Œ† (X : C), set _) ‚â§ K‚ÇÇ,
  le_refl := Œª K, le_refl _,
  le_trans := Œª K‚ÇÅ K‚ÇÇ K‚ÇÉ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ, le_trans h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ,
  le_antisymm := Œª K‚ÇÅ K‚ÇÇ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÅ, pretopology.ext _ _ (le_antisymm h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÅ) }

/--
A pretopology `K` can be completed to a Grothendieck topology `J` by declaring a sieve to be
`J`-covering if it contains a family in `K`.
-/
def to_grothendieck (K : pretopology C) : grothendieck_topology C :=
{ sieves := Œª X S, ‚àÉ R ‚àà K X, R ‚â§ S.arrows,
  top_mem' := Œª X, ‚ü®arrows_with_codomain.singleton_arrow (ùüô _), K.has_isos _, Œª _ _ _, ‚ü®‚ü©‚ü©,
  pullback_stable' := Œª X Y S g,
  begin
    rintro ‚ü®R, hR, RS‚ü©,
    refine ‚ü®_, K.pullbacks g _ hR, _‚ü©,
    rw [‚Üê sieve.gi_generate.gc, pullback_arrows_comm],
    apply sieve.pullback_monotone,
    rwa sieve.gi_generate.gc,
  end,
  transitive' :=
  begin
    rintro X S ‚ü®R', hR', RS‚ü© R t,
    choose t‚ÇÅ t‚ÇÇ t‚ÇÉ using t,
    refine ‚ü®_, K.transitive _ _ hR' (Œª _ f hf, t‚ÇÇ (RS _ hf)), _‚ü©,
    rintro Y _ ‚ü®Z, g, f, hg, hf, rfl‚ü©,
    apply t‚ÇÉ (RS _ hg) _ hf,
  end }

/-- The largest pretopology generating the given Grothendieck topology. -/
def of_grothendieck (J : grothendieck_topology C) : pretopology C :=
{ coverings := Œª X R, J X (sieve.generate R),
  has_isos := Œª X Y f i,
  begin
    apply J.covering_of_eq_top,
    rw [‚Üê sieve.id_mem_iff_eq_top],
    exactI ‚ü®_, inv f, f, by simp‚ü©,
  end,
  pullbacks := Œª X Y f R hR,
  begin
    rw [set.mem_def, pullback_arrows_comm],
    apply J.pullback_stable f hR,
  end,
  transitive := Œª X S Ti hS hTi,
  begin
    apply J.transitive hS,
    intros Y f,
    rintros ‚ü®Z, g, f, hf, rfl‚ü©,
    rw sieve.pullback_comp,
    apply J.pullback_stable g,
    apply J.superset_covering _ (hTi _ hf),
    rintro Y g ‚ü®W, h, g, hg, rfl‚ü©,
    exact ‚ü®_, h, _, ‚ü®_, _, _, hf, hg, rfl‚ü©, by simp‚ü©,
  end }

end pretopology

end category_theory
