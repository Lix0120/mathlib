/-
Copyright (c) 2020 Bhavik Mehta, E. W. Ayers. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta, E. W. Ayers
-/

import category_theory.sites.sieves
import category_theory.full_subcategory
import category_theory.types

universes v u
namespace category_theory

open category_theory category sieve

-- /-- A set of sieves for every object in the category: a candidate to be a Grothendieck topology. -/
-- @[derive complete_lattice]
-- def sieve_set (C : Type u) [category.{v} C] := Œ† (X : C), set (sieve X)

/-- The trivial sieve set, containing only the maximal sieve on each object. -/
def sieve_set.trivial (C : Type u) [category.{v} C] : Œ† (X : C), set (sieve X) := Œª X, {‚ä§}

/--
A sieve on `X` is dense if for any arrow `f : Y ‚ü∂ X`, there is a `g : Z ‚ü∂ Y` with `g ‚â´ f ‚àà S`.
-/
def sieve_set.dense (C : Type u) [category.{v} C] : Œ† (X : C), set (sieve X) :=
Œª X, {S | ‚àÄ {Y : C} (f : Y ‚ü∂ X), ‚àÉ Z (g : Z ‚ü∂ Y), S.arrows (g ‚â´ f)}

/-- The atomic sieve_set just contains all of the non-empty sieves. -/
def sieve_set.atomic (C : Type u) [category.{v} C] : Œ† (X : C), set (sieve X) :=
Œª X, {S | ‚àÉ {Y} (f : Y ‚ü∂ X), S.arrows f}

variables {C : Type u} [category.{v} C]

@[simp]
lemma mem_trivial {C : Type u} [category.{v} C] {X : C} (S : sieve X) :
  S ‚àà sieve_set.trivial C X ‚Üî S = ‚ä§ :=
set.mem_singleton_iff

/--
The definition of a Grothendieck topology: a set of sieves `J X` on each object `X` satisfying
three axioms:
1. For every object `X`, the maximal sieve is in `J X`.
2. If `S ‚àà J X` then its pullback along any `h : Y ‚ü∂ X` is in `J Y`.
3. If `S ‚àà J X` and `R` is a sieve on `X`, then provided that the pullback of `R` along any arrow
   `f : Y ‚ü∂ X` in `S` is in `J Y`, we have that `R` itself is in `J X`.

A sieve `S` on `X` is referred to as `J`-covering, (or just covering), if `S ‚àà J X`.
-/
class grothendieck_topology (J : Œ† (X : C), set (sieve X)) : Prop :=
(max : ‚àÄ X, ‚ä§ ‚àà J X)
(stab : ‚àÄ ‚¶ÉX Y : C‚¶Ñ ‚¶ÉS : sieve X‚¶Ñ (h‚ÇÅ : S ‚àà J X) (f : Y ‚ü∂ X), S.pullback f ‚àà J Y)
(trans : ‚àÄ ‚¶ÉX‚¶Ñ ‚¶ÉS : sieve X‚¶Ñ (hS : S ‚àà J X) (R : sieve X),
         (‚àÄ ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ, S.arrows f ‚Üí R.pullback f ‚àà J Y) ‚Üí R ‚àà J X)

/-- A site is a category equipped with a Grothendieck topology. -/
structure Site :=
(C : Type u)
[ùíû : category.{v} C]
(J : Œ† (X : C), set (sieve X))
[g : grothendieck_topology J]

namespace grothendieck_topology
variables {X Y : C} {S R : sieve X}
variables {J : Œ† (X : C), set (sieve X)} [grothendieck_topology J]

@[simp] lemma top_covering : ‚ä§ ‚àà J X := grothendieck_topology.max _

lemma covering_of_max : S = ‚ä§ ‚Üí S ‚àà J X := Œª h, h.symm ‚ñ∏ grothendieck_topology.max X

lemma superset_covering (Hss : S ‚â§ R) (sjx : S ‚àà J X) : R ‚àà J X :=
begin
  apply grothendieck_topology.trans sjx,
  intros Y h hh,
  rw pullback_eq_top_iff_mem at hh,
  apply covering_of_max,
  rw [‚Üê top_le_iff, ‚Üê hh],
  apply pullback_monotone _ Hss,
end

/-- The sieve `S` on `X` `J`-covers an arrow `f` to `X` if `S.pullback f ‚àà J Y`. -/
def covers (J : Œ† (X : C), set (sieve X)) (S : sieve X) (f : Y ‚ü∂ X) : Prop := S.pullback f ‚àà J Y

lemma covers_iff {J : Œ† (X : C), set (sieve X)} (S : sieve X) (f : Y ‚ü∂ X) :
  covers J S f ‚Üî S.pullback f ‚àà J Y :=
iff.rfl

lemma covering_iff_covers_id {J : Œ† (X : C), set (sieve X)} (S : sieve X) :
  S ‚àà J X ‚Üî covers J S (ùüô X) :=
by simp [covers_iff]

lemma intersection_covering (rj : R ‚àà J X) (sj : S ‚àà J X) : R ‚äì S ‚àà J X :=
begin
  apply grothendieck_topology.trans rj,
  intros Y f Hf,
  have : S.pullback f ‚â§ (R ‚äì S).pullback f,
    intros Z g hg,
    exact ‚ü®downward_closed _ Hf _, hg‚ü©,
  exact superset_covering this (stab sj f),
end

lemma arrow_max (f : Y ‚ü∂ X) (S : sieve X) (hf : S.arrows f) : covers J S f :=
begin
  rw [covers, (pullback_eq_top_iff_mem f).1 hf],
  apply max,
end
lemma arrow_stab (f : Y ‚ü∂ X) (S : sieve X) (h : covers J S f) {Z : C} (g : Z ‚ü∂ Y) : covers J S (g ‚â´ f) :=
begin
  rw [covers, pullback_comp],
  apply stab,
  apply h,
end
lemma arrow_trans (f : Y ‚ü∂ X) (S R : sieve X) (h : covers J S f) :
  (‚àÄ {Z : C} (g : Z ‚ü∂ X), S.arrows g ‚Üí covers J R g) ‚Üí covers J R f :=
begin
  intro k,
  apply trans h,
  intros Z g hg,
  rw ‚Üê pullback_comp,
  apply k (g ‚â´ f) hg,
end

lemma arrow_intersect (f : Y ‚ü∂ X) (S R : sieve X) (hS : covers J S f) (hR : covers J R f) :
  covers J (S ‚äì R) f :=
begin
  rw [covers, pullback_inter],
  apply intersection_covering;
  assumption
end

open sieve_set

/-- The trivial topology is always a Grothendieck topology. -/
instance trivial.grothendieck_topology: grothendieck_topology (sieve_set.trivial C) :=
{ max := Œª X, set.mem_singleton _,
  stab := Œª X Y S HS h,
  begin
    rw mem_trivial at *,
    rw [HS, pullback_top],
  end,
  trans := Œª X S HS R HR,
  begin
    rw [mem_trivial, ‚Üê id_mem_iff_eq_top, pullback_eq_top_iff_mem],
    simp only [mem_trivial] at HR,
    apply HR,
    rwa [id_mem_iff_eq_top, ‚Üê mem_trivial],
  end }

/-- The dense topology is always a Grothendieck topology. -/
instance dense.grothendieck_topology: grothendieck_topology (dense C) :=
{ max := Œª X Y f, ‚ü®Y, ùüô Y, ‚ü®‚ü©‚ü©,
  stab :=
    begin
      intros X Y S H h Z f,
      rcases H (f ‚â´ h) with ‚ü®W, g, H‚ü©,
      exact ‚ü®W, g, by simpa‚ü©,
    end,
  trans :=
    begin
      intros X S H‚ÇÅ R H‚ÇÇ Y f,
      rcases H‚ÇÅ f with ‚ü®Z, g, H‚ÇÉ‚ü©,
      rcases H‚ÇÇ H‚ÇÉ (ùüô Z) with ‚ü®W, h, H‚ÇÑ‚ü©,
      exact ‚ü®W, (h ‚â´ g), by simpa using H‚ÇÑ‚ü©,
    end }

instance : inhabited Site := ‚ü®{ C := Type u, J := sieve_set.dense _ }‚ü©

/--
A category satisfies the right Ore condition if any span can be completed to a
commutative square.
NB. Any category with pullbacks obviously satisfies the right Ore condition.
-/
def right_ore_condition (C : Type u) [category.{v} C] : Prop :=
‚àÄ {X Y Z : C} (yx : Y ‚ü∂ X) (zx : Z ‚ü∂ X), ‚àÉ W (wy : W ‚ü∂ Y) (wz : W ‚ü∂ Z), wy ‚â´ yx = wz ‚â´ zx

/--
The atomic sieveset is a Grothendieck topology when it satisfies the right ore condition.
-/
lemma atomic.grothendieck_topology (hro : right_ore_condition C) : grothendieck_topology (atomic C) :=
{ max := Œª X, ‚ü®_, ùüô _, ‚ü®‚ü©‚ü©,
  stab :=
  begin
    rintros X Y S ‚ü®Z, f, hf‚ü© h,
    rcases hro h f with ‚ü®W, g, k, comm‚ü©,
    refine ‚ü®_, g, _‚ü©,
    simp [mem_pullback, comm, hf],
  end,
  trans :=
  begin
    rintros X S ‚ü®Y, f, hf‚ü© R h,
    rcases h hf with ‚ü®Z, g, hg‚ü©,
    exact ‚ü®_, _, hg‚ü©,
  end }

open opposite

instance : partial_order { J : Œ† (X : C), set (sieve X) // grothendieck_topology J } :=
subtype.partial_order _

lemma intersect (Js : set (Œ† (X : C), set (sieve X))) (hJs : Œ† J ‚àà Js, grothendieck_topology J) :
  grothendieck_topology (Inf Js) :=
{ max :=
  begin
    rintro X S ‚ü®‚ü®J, hJ‚ü©, rfl‚ü©,
    apply (hJs _ hJ).max,
  end,
  stab :=
  begin
    rintro X Y S hS f _ ‚ü®J, rfl‚ü©,
    apply (hJs _ J.2).stab,
    apply hS _ ‚ü®J, rfl‚ü©,
  end,
  trans :=
  begin
    rintro X S hS R t _ ‚ü®J, rfl‚ü©,
    apply (hJs _ J.2).trans,
    apply hS _ ‚ü®J, rfl‚ü©,
    intros Y f hf,
    apply t hf _ ‚ü®_, rfl‚ü©,
  end }

instance : has_Inf { J : Œ† (X : C), set (sieve X) // grothendieck_topology J } :=
{ Inf := Œª T, ‚ü®Inf (subtype.val '' T), intersect _ (by { rintro _ ‚ü®‚ü®_, q‚ü©, _, rfl‚ü©, apply q })‚ü©}

instance : complete_lattice { J : Œ† (X : C), set (sieve X) // grothendieck_topology J } :=
complete_lattice_of_Inf _
begin
  intro T,
  refine @is_glb.of_image _ _ _ _ subtype.val _ _ _ _,
  intros, refl,
  exact is_glb_Inf (subtype.val '' T),
end

end grothendieck_topology

end category_theory
