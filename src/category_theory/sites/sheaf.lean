/-
Copyright (c) 2020 Bhavik Mehta, E. W. Ayers. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta, E. W. Ayers
-/

import category_theory.sites.grothendieck
import category_theory.full_subcategory
import category_theory.types

universes v u
namespace category_theory

open category_theory category sieve

variables {C : Type u} [category.{v} C]

namespace grothendieck_topology
variables {X Y : C} {S R : sieve X}
variables {J : sieve_set C} [grothendieck_topology J]

open sieve_set

open opposite

def matching_family (P : C·µí·µñ ‚•§ Type v) (S : sieve X) :=
S.functor ‚ü∂ P

def amalgamation {P : C·µí·µñ ‚•§ Type v} {S : sieve X} (Œ≥ : matching_family P S) :=
{Œ± : yoneda.obj X ‚ü∂ P // sieve.functor_inclusion S ‚â´ Œ± = Œ≥}

@[derive subsingleton]
def sheaf_condition (J : sieve_set C) (P : C·µí·µñ ‚•§ Type v) : Type (max u v) :=
Œ† (X : C) (S : sieve X) (Œ≥ : matching_family P S), S ‚àà J X ‚Üí unique (amalgamation Œ≥)

def matching_family' (P : C·µí·µñ ‚•§ Type v) {c : C} (S : sieve c) :=
{x : Œ† {d : C} {f : d ‚ü∂ c}, S.arrows f ‚Üí P.obj (opposite.op d) //
 ‚àÄ {d e : C} (f : d ‚ü∂ c) (g : e ‚ü∂ d) (h : S.arrows f), x (S.downward_closed h g) = P.map g.op (x h)}

def amalgamation' {P : C·µí·µñ ‚•§ Type v} {c : C} {S : sieve c} (Œ≥ : matching_family' P S) :=
{y : P.obj (opposite.op c) // ‚àÄ {d : C} (f : d ‚ü∂ c) (hf : S.arrows f), P.map f.op y = Œ≥.1 hf}

@[derive subsingleton]
def sheaf_condition' (J : sieve_set C) (P : C·µí·µñ ‚•§ Type v) : Type (max u v) :=
Œ† (c : C) (S : sieve c) (Œ≥ : matching_family' P S), S ‚àà J c ‚Üí unique (amalgamation' Œ≥)

def matching_family'_equiv_matching_family (P : C·µí·µñ ‚•§ Type v) :
  matching_family' P S ‚âÉ matching_family P S :=
{ to_fun := Œª x, ‚ü®Œª _ t, x.1 t.2, Œª c c' f, funext $ Œª t, x.2 _ _ t.2‚ü©,
  inv_fun := Œª x, ‚ü®Œª d f hf, x.app _ ‚ü®f, hf‚ü©, Œª d d' f g h, congr_fun (x.2 g.op) ‚ü®f, h‚ü©‚ü©,
  left_inv := Œª _, subtype.ext $ funext $ Œª _, funext $ Œª _, funext $ Œª _, rfl,
  right_inv := Œª _, by { ext _ ‚ü®_, _‚ü©, refl } }

def amalgamation'_equiv_amalgamation (P : C·µí·µñ ‚•§ Type v) (x : matching_family' P S) :
  amalgamation (matching_family'_equiv_matching_family P x) ‚âÉ (amalgamation' x) :=
{ to_fun := Œª Œ≥,
  { val := Œ≥.1.app _ (ùüô X),
    property := Œª d f hf,
    begin
      have := congr_fun (Œ≥.1.naturality f.op) (ùüô _),
      dsimp at this,
      erw ‚Üê this,
      rw comp_id,
      have q := congr_arg (Œª t, nat_trans.app t (opposite.op d)) Œ≥.2,
      dsimp at q,
      have := congr_fun q ‚ü®f, hf‚ü©,
      exact this,
    end },
  inv_fun := Œª Œ≥,
  { val :=
    { app := Œª c f, P.map f.op Œ≥.1,
      naturality' := Œª c c' f, funext $ Œª g, functor_to_types.map_comp_apply P g.op f Œ≥.1 },
    property :=
    begin
      ext c ‚ü®f, hf‚ü©,
      apply Œ≥.2,
    end },
  left_inv :=
  begin
    rintro ‚ü®Œ≥‚ÇÅ, Œ≥‚ÇÇ‚ü©,
    ext d f,
    dsimp,
    rw ‚Üê functor_to_types.naturality _ _ Œ≥‚ÇÅ f.op (ùüô X),
    dsimp,
    simp,
  end,
  right_inv :=
  begin
    intro Œ≥,
    ext1,
    apply functor_to_types.map_id_apply,
  end }

def sheaf'_equiv_sheaf (J : sieve_set C) (P : C·µí·µñ ‚•§ Type v) :
  sheaf_condition J P ‚âÖ sheaf_condition' J P :=
{ hom :=
  begin
    intros h c S Œ≥ hS,
    apply equiv.unique (amalgamation'_equiv_amalgamation _ _).symm,
    apply h _ _ _ hS,
  end,
  inv :=
  begin
    intros h c S Œ≥ hS,
    haveI := h _ _ ((matching_family'_equiv_matching_family P).symm Œ≥) hS,
    have := equiv.unique (amalgamation'_equiv_amalgamation P ((matching_family'_equiv_matching_family P).symm Œ≥)),
    simpa using this,
  end }

variables (C J)

structure Sheaf :=
(P : C·µí·µñ ‚•§ Type v)
(sheaf_cond : sheaf_condition J P)

instance : category (Sheaf C J) := induced_category.category Sheaf.P

end grothendieck_topology

end category_theory
