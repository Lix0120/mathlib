/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import category_theory.adjunction
import category_theory.elements
import category_theory.limits.functor_category
import category_theory.limits.shapes
import category_theory.limits.types
import category_theory.limits.shapes.types
import category_theory.closed.cartesian
import category_theory.conj

/-!
# Colimit of representables

This file constructs an adjunction between `(C·µí·µñ ‚•§ Type u)` and `‚Ñ∞` given a functor `A : C ‚•§ ‚Ñ∞`,
where the right adjoint sends `(E : ‚Ñ∞)` to `c ‚Ü¶ (A.obj c ‚ü∂ E)` (provided `‚Ñ∞` has colimits).

This adjunction is used to show that every presheaf is a colimit of representables.

Further, the left adjoint `colimit_adj.L : (C·µí·µñ ‚•§ Type u) ‚•§ ‚Ñ∞` satisfies `yoneda ‚ãô L ‚âÖ A`, that
is, an extension of `A : C ‚•§ ‚Ñ∞` to `(C·µí·µñ ‚•§ Type u) ‚•§ ‚Ñ∞` through `yoneda : C ‚•§ C·µí·µñ ‚•§ Type u`.
TODO: Show `colimit_adj.L` is unique amongst cocontinuous functors with this property.

## Tags
colimit, representable, presheaf
-/

namespace category_theory

noncomputable theory

open category limits
universes u‚ÇÅ u‚ÇÇ

variables {C : Type u‚ÇÅ} [small_category C]
variables {‚Ñ∞ : Type u‚ÇÇ} [category.{u‚ÇÅ} ‚Ñ∞]
variable (A : C ‚•§ ‚Ñ∞)

namespace colimit_adj

/--
The functor taking `(E : ‚Ñ∞) (c : C·µí·µñ)` to the homset `(A.obj C ‚ü∂ E)`. It is shown in `L_adjunction`
that this functor has a left adjoint (provided `E` has colimits) given by taking colimits over
categories of elements.
In the case where `‚Ñ∞ = C·µí·µñ ‚•§ Type u` and `A = yoneda`, this functor is isomorphic to the identity.

Defined as in [MM92], Chapter I, Section 5, Theorem 2.
-/
@[simps {rhs_md := semireducible}]
def restricted_yoneda : ‚Ñ∞ ‚•§ (C·µí·µñ ‚•§ Type u‚ÇÅ) :=
yoneda ‚ãô (whiskering_left _ _ (Type u‚ÇÅ)).obj (functor.op A)

/--
The functor `restricted_yoneda` is isomorphic to the identity functor when evaluated at the yoneda
embedding.
-/
def restricted_yoneda_yoneda : restricted_yoneda (yoneda : C ‚•§ C·µí·µñ ‚•§ Type u‚ÇÅ) ‚âÖ ùü≠ _ :=
nat_iso.of_components
(Œª P, nat_iso.of_components (Œª X, yoneda_sections_small X.unop _)
  (Œª X Y f, funext $ Œª x,
  begin
    dsimp [ulift_trivial, yoneda_lemma],
    rw ‚Üê functor_to_types.naturality _ _ x f (ùüô _),
    dsimp,
    simp,
  end))
(Œª _ _ _, rfl)

/--
(Implementation). The equivalence of homsets which helps construct the left adjoint to
`colimit_adj.restricted_yoneda`.
It is shown in `restrict_yoneda_hom_equiv_natural` that this is a natural bijection.
-/
def restrict_yoneda_hom_equiv (P : C·µí·µñ ‚•§ Type u‚ÇÅ) (E : ‚Ñ∞)
  {c : cocone ((category_of_elements.œÄ P).left_op ‚ãô A)} (t : is_colimit c) :
  (c.X ‚ü∂ E) ‚âÉ (P ‚ü∂ (restricted_yoneda A).obj E) :=
(t.hom_iso' E).to_equiv.trans
{ to_fun := Œª k,
  { app := Œª c p, k.1 (opposite.op ‚ü®_, p‚ü©),
    naturality' := Œª c c' f, funext $ Œª p,
      (k.2 (has_hom.hom.op ‚ü®f, rfl‚ü© :
              (opposite.op ‚ü®c', P.map f p‚ü© : P.elements·µí·µñ) ‚ü∂ opposite.op ‚ü®c, p‚ü©)).symm },
  inv_fun := Œª œÑ,
  { val := Œª p, œÑ.app p.unop.1 p.unop.2,
    property := Œª p p' f,
    begin
      simp_rw [‚Üê f.unop.2],
      apply (congr_fun (œÑ.naturality f.unop.1) p'.unop.2).symm,
    end },
  left_inv :=
  begin
    rintro ‚ü®k‚ÇÅ, k‚ÇÇ‚ü©,
    ext,
    dsimp,
    congr' 1,
    simp,
  end,
  right_inv :=
  begin
    rintro ‚ü®_, _‚ü©,
    refl,
  end }

/-- (Implementation). Show that the bijection in `Le'` is natural (on the right). -/
lemma restrict_yoneda_hom_equiv_natural (P : C·µí·µñ ‚•§ Type u‚ÇÅ) (E‚ÇÅ E‚ÇÇ : ‚Ñ∞) (g : E‚ÇÅ ‚ü∂ E‚ÇÇ)
  {c : cocone _} (t : is_colimit c) (k : c.X ‚ü∂ E‚ÇÅ) :
restrict_yoneda_hom_equiv A P E‚ÇÇ t (k ‚â´ g) =
  restrict_yoneda_hom_equiv A P E‚ÇÅ t k ‚â´ (restricted_yoneda A).map g :=
begin
  ext _ X p,
  apply (assoc _ _ _).symm,
end

variables [has_colimits ‚Ñ∞]

/--
The left adjoint to the functor `restricted_yoneda` (shown in `yoneda_adjunction`). It is also an
extension of `A` along the yoneda embedding (shown in `is_extension_along_yoneda`). -/
def extend_along_yoneda : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞ :=
adjunction.left_adjoint_of_equiv
  (Œª P E, restrict_yoneda_hom_equiv A P E (colimit.is_colimit _))
  (Œª P E E' g, restrict_yoneda_hom_equiv_natural A P E E' g _)

@[simp]
lemma extend_along_yoneda_obj (P : C·µí·µñ ‚•§ Type u‚ÇÅ) : (extend_along_yoneda A).obj P =
colimit ((category_of_elements.œÄ P).left_op ‚ãô A) := rfl

/--
Show `extend_along_yoneda` is left adjoint to `restricted_yoneda`.

The construction of [MM92], Chapter I, Section 5, Theorem 2.
-/
def yoneda_adjunction : extend_along_yoneda A ‚ä£ restricted_yoneda A :=
adjunction.adjunction_of_equiv_left _ _

/--
The initial object in the category of elements for a representable functor. In `is_initial` it is
shown that this is terminal.
-/
def elements.initial (A : C) : (yoneda.obj A).elements :=
‚ü®opposite.op A, ùüô _‚ü©

/--
Show that `elements.initial A` is initial in the category of elements for the `yoneda` functor.
-/
def is_initial (A : C) : is_initial (elements.initial A) :=
{ desc := Œª s, ‚ü®s.X.2.op, comp_id _‚ü©,
  uniq' := Œª s m w,
  begin
    simp_rw ‚Üê m.2,
    dsimp [elements.initial],
    simp,
  end }

/--
`extend_along_yoneda A` is an extension of `A` to the presheaf category along the yoneda embedding.
TODO: Among functors preserving colimits, `extend_along_yoneda` is unique with this property (up to
isomorphism).

The first part of [MM92], Chapter I, Section 5, Corollary 4.
-/
def is_extension_along_yoneda : (yoneda : C ‚•§ C·µí·µñ ‚•§ Type u‚ÇÅ) ‚ãô extend_along_yoneda A ‚âÖ A :=
nat_iso.of_components
(Œª X, (colimit.is_colimit _).cocone_point_unique_up_to_iso
      (colimit_of_diagram_terminal (terminal_op_of_initial (is_initial _)) _))
begin
  intros X Y f,
  change (colimit.desc _ ‚ü®_, _‚ü© ‚â´ colimit.desc _ _) = colimit.desc _ _ ‚â´ _,
  apply colimit.hom_ext,
  intro j,
  rw [colimit.Œπ_desc_assoc, colimit.Œπ_desc_assoc],
  change (colimit.Œπ _ _ ‚â´ ùüô _) ‚â´ colimit.desc _ _ = _,
  rw [comp_id, colimit.Œπ_desc],
  dsimp,
  rw ‚Üê A.map_comp,
  congr' 1,
end

end colimit_adj

open colimit_adj

/--
Since `extend_along_yoneda A` is adjoint to `restricted_yoneda A`, if we use `A = yoneda`
then `restricted_yoneda A` is isomorphic to the identity, and so `extend_along_yoneda A` is as well.
-/
def extend_along_yoneda_yoneda : extend_along_yoneda (yoneda : C ‚•§ _) ‚âÖ ùü≠ _ :=
adjunction.nat_iso_of_right_adjoint_nat_iso
  (yoneda_adjunction _)
  adjunction.id
  restricted_yoneda_yoneda

/--
This is a cocone with point `P`, for which the diagram consists solely of representables.
It is shown in `colimit_of_representable P` that this cocone is a colimit: that is, we have
exhibited an arbitrary presheaf `P` as a colimit of representables.

The construction of [MM92], Chapter I, Section 5, Corollary 3.
-/
def cocone_of_representable (P : C·µí·µñ ‚•§ Type u‚ÇÅ) :
  cocone ((category_of_elements.œÄ P).left_op ‚ãô yoneda) :=
cocone.extend (colimit.cocone _) (extend_along_yoneda_yoneda.hom.app P)

@[simp] lemma cocone_of_representable_X (P : C·µí·µñ ‚•§ Type u‚ÇÅ) : (cocone_of_representable P).X = P := rfl

/--
The cocone with point `P` given by `the_cocone` is a colimit: that is, we have exhibited an
arbitrary presheaf `P` as a colimit of representables.

The result of [MM92], Chapter I, Section 5, Corollary 3.
-/
def colimit_of_representable (P : C·µí·µñ ‚•§ Type u‚ÇÅ) : is_colimit (cocone_of_representable P) :=
begin
  apply is_colimit.of_point_iso (colimit.is_colimit ((category_of_elements.œÄ P).left_op ‚ãô yoneda)),
  change is_iso (colimit.desc _ (cocone.extend _ _)),
  rw [colimit.desc_extend, colimit.desc_cocone],
  apply_instance,
end

section cartesian_closed

universes v‚ÇÉ u‚ÇÉ
variables {D : Type u‚ÇÉ} [category.{u‚ÇÅ} D]

instance [has_finite_products D] [cartesian_closed D] (X : D) :
  preserves_colimits (prod.functor.obj X) :=
(exp.adjunction X).left_adjoint_preserves_colimits

instance prod_preserves_colimits [has_finite_products D] [cartesian_closed D] [has_colimits D]
  (F : C ‚•§ D) :
  preserves_colimits (prod.functor.obj F) :=
{ preserves_colimits_of_shape := Œª J ùí•, by exactI
  { preserves_colimit := Œª K,
    { preserves := Œª c t,
      begin
        apply evaluation_jointly_reflects_colimits,
        intro k,
        change is_colimit ((prod.functor.obj F ‚ãô (evaluation _ _).obj k).map_cocone c),
        let i : (prod.functor.obj F ‚ãô (evaluation C D).obj k) ‚âÖ ((evaluation C D).obj k ‚ãô prod.functor.obj (F.obj k)),
          apply nat_iso.of_components _ _,
          { intro G,
            apply as_iso (prod_comparison ((evaluation C D).obj k) F G) },
          { intros G G' z,
            apply prod_comparison_natural ((evaluation C D).obj k) (ùüô F) z },
        let i' : K ‚ãô (prod.functor.obj F ‚ãô (evaluation C D).obj k) ‚âÖ K ‚ãô (evaluation C D).obj k ‚ãô prod.functor.obj (F.obj k),
          apply iso_whisker_left K i,
        let : is_colimit (((evaluation C D).obj k ‚ãô prod.functor.obj (F.obj k)).map_cocone c),
          apply preserves_colimit.preserves,
          apply t,
        apply is_colimit.of_iso_colimit ((is_colimit.precompose_hom_equiv i' _).symm this),
        apply cocones.ext _ _,
          apply (as_iso (prod_comparison ((evaluation C D).obj k) F c.X)).symm,
        intro j,
        dsimp,
        rw is_iso.comp_inv_eq,
        apply (prod_comparison_natural ((evaluation C D).obj k) (ùüô F) (c.Œπ.app j)).symm,
      end } } }

@[simps]
def presheaf_exp (F G : C·µí·µñ ‚•§ Type u‚ÇÅ) : C·µí·µñ ‚•§ Type u‚ÇÅ :=
{ obj := Œª A, F ‚®Ø yoneda.obj A.unop ‚ü∂ G,
  map := Œª A B f Œ±, limits.prod.map (ùüô _) (yoneda.map f.unop) ‚â´ Œ± }.

def presheaf_exp_representable_hom_equiv (F G : C·µí·µñ ‚•§ Type u‚ÇÅ) (A : C) :
  (yoneda.obj A ‚ü∂ presheaf_exp F G) ‚âÉ (F ‚®Ø yoneda.obj A ‚ü∂ G) :=
(yoneda_sections_small A (presheaf_exp F G)).to_equiv

@[simp]
lemma yoneda_sections_small_hom_apply (X : C) (F f) :
  (yoneda_sections_small X F).hom f = f.app _ (ùüô _) :=
rfl

@[simp]
lemma yoneda_sections_small_inv (X : C) (F t) (Y : C·µí·µñ) (f : Y.unop ‚ü∂ X) :
  ((yoneda_sections_small X F).inv t).app Y f = F.map f.op t :=
rfl

lemma presheaf_exp_representable_hom_equiv_symm_natural_A (F G : C·µí·µñ ‚•§ Type u‚ÇÅ)
  {A B : C} (g : B ‚ü∂ A) (f : F ‚®Ø yoneda.obj A ‚ü∂ G) :
  yoneda.map g ‚â´ (presheaf_exp_representable_hom_equiv F G A).symm f =
  (presheaf_exp_representable_hom_equiv F G B).symm (limits.prod.map (ùüô _) (yoneda.map g) ‚â´ f) :=
begin
  ext a h b : 3,
  simp only [yoneda_map_app, functor_to_types.comp],
  change ((yoneda_sections_small A (presheaf_exp F G)).inv f).app a (h ‚â´ g) =
    (((presheaf_exp_representable_hom_equiv F G B).symm) (limits.prod.map (ùüô F) (yoneda.map g) ‚â´ f)).app a h,
  change ((yoneda_sections_small A (presheaf_exp F G)).inv f).app a (h ‚â´ g) =
    (((yoneda_sections_small B (presheaf_exp F G)).inv) (limits.prod.map (ùüô F) (yoneda.map g) ‚â´ f)).app a h,
  rw yoneda_sections_small_inv,
  rw yoneda_sections_small_inv,
  simp,
end

lemma presheaf_exp_representable_hom_equiv_natural_A (F G : C·µí·µñ ‚•§ Type u‚ÇÅ)
  {A B : C} (g : B ‚ü∂ A) (f) :
  (presheaf_exp_representable_hom_equiv F G B) (yoneda.map g ‚â´ f) =
  (limits.prod.map (ùüô _) (yoneda.map g) ‚â´ presheaf_exp_representable_hom_equiv F G A f) :=
begin
  rw ‚Üê equiv.eq_symm_apply,
  rw ‚Üê presheaf_exp_representable_hom_equiv_symm_natural_A,
  rw equiv.symm_apply_apply,
end

instance : has_finite_products (Type u‚ÇÅ) := has_finite_products_of_has_products _

def type_equiv {X Y Z : Type u‚ÇÅ} : (Z √ó X ‚ü∂ Y) ‚âÉ (X ‚Üí (Z ‚Üí Y)) :=
{ to_fun := Œª f x z, f ‚ü®z, x‚ü©,
  inv_fun := Œª f ‚ü®z, x‚ü©, f x z,
  left_inv := Œª f, funext (Œª ‚ü®z, x‚ü©, rfl),
  right_inv := Œª x, rfl }

def type_equiv' {X Y Z : Type u‚ÇÅ} : (Z ‚®Ø X ‚ü∂ Y) ‚âÉ (X ‚Üí (Z ‚Üí Y)) :=
begin
  apply equiv.trans _ type_equiv,
  apply iso.hom_congr _ (iso.refl _),
  apply limit.iso_limit_cone (types.binary_product_limit_cone _ _),
end

lemma type_equiv'_natural {X X' Y Z : Type u‚ÇÅ} (f : X' ‚ü∂ X) (g : Z ‚®Ø X ‚ü∂ Y) :
  type_equiv' (limits.prod.map (ùüô Z) f ‚â´ g) = f ‚â´ type_equiv' g :=
begin
  dsimp [type_equiv'],
  have := types.binary_product_limit_cone Z X,
  -- ext x' z,
  -- rw type_equiv',
  -- dsimp,
  -- dsimp only [iso.hom_congr],

  -- dsimp [type_equiv'],
  -- rw comp_id,
  -- rw comp_id,
  -- have := limit.iso_limit_cone_inv_œÄ,

end

instance : cartesian_closed (Type u‚ÇÅ) :=
{ closed := Œª Z,
  { is_adj :=
    { right :=
      begin
        refine @adjunction.right_adjoint_of_equiv _ _ _ _ (prod.functor.obj Z) _ (Œª X Y, type_equiv') _,
        intros X' X Y f g,
        dsimp,
      end,
      adj :=
      begin
        refine @adjunction.adjunction_of_equiv_right _ _ _ _ (prod.functor.obj Z) _ (Œª X Y, type_equiv') _,
      end
    }

  }

}

-- set_option pp.universes true

def presheaf_exp_hom_equiv (F G H : C·µí·µñ ‚•§ Type u‚ÇÅ) : (H ‚ü∂ presheaf_exp F G) ‚âÉ (F ‚®Ø H ‚ü∂ G) :=
begin
  let : is_colimit ((prod.functor.obj F).map_cocone (cocone_of_representable H)),
    apply preserves_colimit.preserves,
    apply colimit_of_representable,
  apply iso.to_equiv,
  apply ((colimit_of_representable H).hom_iso (presheaf_exp F G)) ‚â™‚â´ _ ‚â™‚â´ (this.hom_iso G).symm,
  apply equiv.to_iso,
  refine ‚ü®_, _, _, _‚ü©,
  { intro f,
    refine ‚ü®Œª X, presheaf_exp_representable_hom_equiv _ _ _ (f.app X), _‚ü©,
    intros X Y g,
    dsimp,
    rw ‚Üê presheaf_exp_representable_hom_equiv_natural_A,
    have h‚ÇÅ := f.naturality g,
    dsimp at h‚ÇÅ,
    rw [h‚ÇÅ, comp_id, comp_id] },
  { intro f,
    refine ‚ü®Œª X, (presheaf_exp_representable_hom_equiv _ _ _).symm (f.app X), _‚ü©,
    intros X Y g,
    dsimp,
    have h‚ÇÅ : limits.prod.map (ùüô F) (yoneda.map (g.unop : Y.unop.1 ‚ü∂ X.unop.1).unop) ‚â´ f.app Y = f.app X ‚â´ ùüô G,
      apply f.naturality g,
    rw presheaf_exp_representable_hom_equiv_symm_natural_A,
    rw h‚ÇÅ,
    dsimp, simp },
  { intro f,
    ext : 2,
    dsimp,
    simp },
  { intro f,
    ext : 2,
    dsimp,
    simp }
end

-- calc (H ‚ü∂ presheaf_exp F G) ‚âÉ ((cocone_of_representable H).X ‚ü∂ presheaf_exp F G) : equiv.refl _
--                         ... ‚âÉ (((category_of_elements.œÄ H).left_op ‚ãô yoneda) ‚ü∂ (functor.const _).obj (presheaf_exp F G)) : (colimit_of_representable H).hom_iso _
--                         ... ‚âÉ (F ‚®Ø H ‚ü∂ G) : sorry
-- { to_fun := Œª g,
--   begin

--   end,
--   inv_fun := Œª f,
--   begin
--     let Q : cocone ((category_of_elements.œÄ H).left_op ‚ãô yoneda),
--     { refine ‚ü®presheaf_exp F G, _, _‚ü©,
--       { intro X,
--         apply (presheaf_exp_representable_hom_equiv F G _).symm _,
--         apply limits.prod.map (ùüô _) _ ‚â´ f,
--         apply (cocone_of_representable H).Œπ.app X },
--       { intros X Y g,
--         dsimp,
--         rw comp_id,
--         rw ‚Üê (cocone_of_representable H).w g,
--         dsimp,
--         rw presheaf_exp_representable_hom_equiv_symm_natural_A,
--         rw [prod.map_map_assoc, comp_id] } },
--     apply (colimit_of_representable H).desc Q,
--   end,

-- }
-- begin
--   change ((cocone_of_representable H).X ‚ü∂ _) ‚âÉ _,
-- end

end cartesian_closed

end category_theory
